#!/usr/local/bin python3
# -*- coding: utf-8 -*-


#在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。
#
#为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。
# 在Python中，一个.py文件就称之为一个模块（Module）。
#
#使用模块有什么好处？
#
#最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。

#使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。点这里查看Python的所有内置函数。
#
#你也许还想到，如果不同的人编写的模块名相同怎么办？为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。
#
#举个例子，一个abc.py的文件就是一个名字叫abc的模块，一个xyz.py的文件就是一个名字叫xyz的模块。
#
#现在，假设我们的abc和xyz这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如mycompany，按照如下目录存放：
#
#mycompany
#├─ __init__.py
#├─ abc.py
#└─ xyz.py

#引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz。
#
#请注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany。
#
#类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：
#
#mycompany
# ├─ web
# │  ├─ __init__.py
# │  ├─ utils.py
# │  └─ www.py
# ├─ __init__.py
# ├─ abc.py
# └─ utils.py
#文件www.py的模块名就是mycompany.web.www，两个文件utils.py的模块名分别是mycompany.utils和mycompany.web.utils。
#
# 自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。
# mycompany.web也是一个模块，请指出该模块对应的.py文件。
#
#总结
#模块是一组Python代码的集合，可以使用其他模块，也可以被其他模块使用。
#
#创建自己的模块时，要注意：
#
#模块名要遵循Python变量命名规范，不要使用中文、特殊字符；
#模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行import abc，若成功则说明系统存在此模块。

#-------------------------------------------------------------------------------------------------------------------------
# use module, refer to hellowmodule.py
#-------------------------------------------------------------------------------------------------------------------------

#作用域
#在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过_前缀来实现的。

import hello

#特殊变量
#类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的__author__，__name__就是特殊变量，hello模块定义的文档注释也可以用特殊变量__doc__访问，我们自己的变量一般不要用这种变量名；
print(hello.__author__)
print(hello.__name__)
print(hello.__doc__)

#类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等；
#之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。

#外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。
print(hello._private_1('xx'))



#-------------------------------------------------------------------------------------------------------------------------
# 第三方模块搜索路径
#-------------------------------------------------------------------------------------------------------------------------
#默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中：

import sys
print(sys.path)

#如果我们要添加自己的搜索目录，有两种方法：
# 一是直接修改sys.path，添加要搜索的目录,这种方法是在运行时修改，运行结束后失效。
#sys.path.append('/Users/michael/my_py_scripts')

#第二种方法是设置环境变量PYTHONPATH，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。