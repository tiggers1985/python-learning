#!/usr/local/env python3
# -*- coding: utf-8 -*-

#-------------------------------------------------------------------------------------------------------------------------
# re
#-------------------------------------------------------------------------------------------------------------------------
'''
Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要特别注意：

s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'
因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：

s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'
'''
import re

#match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))

if re.match(r'^\d{3}\-\d{3,8}$', '010-12345'):
    print('ok')
else:
    print('failed')


#-------------------------------------------------------------------------------------------------------------------------
# 切分字符串
#-------------------------------------------------------------------------------------------------------------------------

val = 'a b   c'
print(val.split(' ')) #['a', 'b', '', '', 'c']
print(re.split(r'\s+', val)) #['a', 'b', 'c']


#-------------------------------------------------------------------------------------------------------------------------
# 分组 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。
#-------------------------------------------------------------------------------------------------------------------------
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))
print(m.group(1))

'''
如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。
注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
'''


#-------------------------------------------------------------------------------------------------------------------------
# 编译
#-------------------------------------------------------------------------------------------------------------------------

'''
当我们在Python中使用正则表达式时，re模块内部会干两件事情：

1. 编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
2. 用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
'''

reg = re.compile(r'^(\d{3})-(\d{3,8})$')

print(reg.match('010-12345').groups())